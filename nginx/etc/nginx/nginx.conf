
#user  nobody;
worker_processes  2;					# 设置 Nginx 工作进程数量为 2
#worker_cpu_affinity 01 10;				# 绑定工作进程到特定的 CPU 核心

pid /data/nginx/nginx.pid;				# 指定 Nginx 主进程的 PID 文件位置

events {
	use epoll;							# 使用 epoll 事件模型，适用于高并发场景
	worker_connections  1024;			# 每个工作进程的最大连接数为 1024
}

http {
	charset                utf-8;		# 设置默认的字符编码为 UTF-8
	sendfile        		on;			# 开启高效文件传输；（内核直接发送文件到客户端）
	#tcp_nopush     		on;			# 减少网络报文段数量；（达到一定数据量再发送）
	tcp_nodelay 			on;			# 提高I/O性能，适用于非持久连接

	keepalive_timeout  		45;			# 客户端与 Nginx 的连接保持时间，默认 65 秒；
	client_header_timeout 	15;			# 读取客户端请求头数据的超时时间，默认 60 秒；
	client_body_timeout		15;			# 读取客户端请求主体的超时时间，默认 60 秒；
	send_timeout			25;			# 响应客户端的超时时间，默认 60 秒；

	# 限速配置，限制每秒请求速率和并发连接数
	limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;	 	# 每秒最多 5 个请求
	limit_conn_zone $binary_remote_addr zone=addr:10m;				# 限制每个 IP 的最大并发连接数

	# MIME 类型配置
	include       mime.types;			# 包含 MIME 类型文件
	default_type  application/octet-stream;		# 默认 MIME 类型

	# 定义日志格式
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
					'$status $body_bytes_sent "$http_referer" '
					'"$http_user_agent" "$http_x_forwarded_for" $request_time';

	# 访问 JSON 日志格式
	log_format access_json '{'
					'"@timestamp": "$time_local",'
					'"server_addr": "$server_addr",'
					'"remote_addr": "$remote_addr",'
					'"request_time": "$request_time",'
					'"request_method": "$request_method",'
					'"request_uri": "$request_uri",'
					'"status": "$status",'
					'"bytes": "$body_bytes_sent",'
					'"http_referer": "$http_referer",'
					'"http_x_forwarded_for": "$http_x_forwarded_for",'
					'"http_user_agent": "$http_user_agent",'
					'"upstream_response_time": "$upstream_response_time"'
					'}';
	# 日志路径
	access_log		/data/nginx/logs/access.log  access_json;
	error_log		/data/nginx/logs/error.log   warn;

	#gzip 压缩
	gzip on;

	# 禁用目录列表
	autoindex off;

	#隐藏版本号
	server_tokens off;

	# 其他配置文件
	include extra/www.conf;
}